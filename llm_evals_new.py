# -*- coding: utf-8 -*-
"""LLM_Evals_New.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wsrb-liL8fl9EySBLZ3NsrS4OnQvTd2C
"""

!pip install pandas rouge-score sentence-transformers scikit-learn

import pandas as pd
from rouge_score import rouge_scorer
from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer

df = pd.read_csv('/content/Answers_Models.csv')

# Initialize models
scorer = rouge_scorer.RougeScorer(['rougeL'], use_stemmer=True)
embedding_model = SentenceTransformer('all-MiniLM-L6-v2')

# Prepare the results dataframe
results = []

model_columns = ['gpt_4o', 'gpt_4o_mini', 'gpt_4', 'gpt_3_5_turbo', 'gemini_1_5_flash', 'gemini_2_0_flash']

for model_name in model_columns:
    rouge_scores = []
    cosine_scores = []

    for _, row in df.iterrows():
        ground = row['ground_truth']
        prediction = row[model_name]

        # ROUGE-L
        rouge = scorer.score(ground, prediction)
        rouge_l_f = rouge['rougeL'].fmeasure
        rouge_scores.append(rouge_l_f)

        # Semantic similarity
        embeddings = embedding_model.encode([ground, prediction])
        cosine = cosine_similarity([embeddings[0]], [embeddings[1]])[0][0]
        cosine_scores.append(cosine)

    results.append({
        'model': model_name,
        'avg_rougeL': sum(rouge_scores) / len(rouge_scores),
        'avg_cosine_sim': sum(cosine_scores) / len(cosine_scores)
    })

# Convert to DataFrame and display
results_df = pd.DataFrame(results).sort_values(by='avg_cosine_sim', ascending=False).reset_index(drop=True)
print(results_df)

